import { useState, useEffect } from 'react'
import { usePage } from '@inertiajs/react'
import axios from 'axios'

declare const Xendit: any

const Checkout = () => {
    // This is the unique code generated by the system to
    // track the transaction for the payment link.
    const auth = usePage().props.auth

    const [isXenditLoaded, setXenditLoaded] = useState(false)

    // API response.
    const [apiResponse, setApiResponse] = useState('')

    // Error states.
    const [cardError, setCardError] = useState('')
    const [errorMessage, setErrorMessage] = useState('')
    const [errors, setErrors] = useState({
        error_code: '',
        message: '',
        errors: [
            {
                message: '',
                path: ''
            }
        ]
    })

    // OTP URL (Will show the OTP dialog when value is set.)
    const [otpUrl, setOtpUrl] = useState('')

    // Determines whether to show the OTP dialog or not.
    const [authenticating, setAuthenticating] = useState(false)

    // Determines if the card token is for single or multi-use.
    const [isMultiUse, setIsMultiUse] = useState(false)

    // Credit/debit card details.
    const initCardState = {
        card_number: '',
        card_exp_month: '',
        card_exp_year: '',
        card_cvn: ''
    }
    const [cardDetails, setCardDetails] = useState(initCardState)

    // Example currency for the charge.
    const [currency, setCurrency] = useState('PHP')

    // Update state when changing form values.
    const handleFormChange = (
        event: React.ChangeEvent<HTMLInputElement>,
        obj: string
    ) => {
        const key = event.target.id
        let value = event.target.value

        // Strip spaces if the key is card_number
        if (key === 'card_number') {
            value = value.replace(/\s+/g, '') // Removes all spaces
        }

        switch (obj) {
            case 'cardDetails':
                setCardDetails(values => ({
                    ...values,
                    [key]: value
                }))
                break

            default:
                break
        }
    }

    // Format card number
    const formatCardNumber = (cardNumber: string) => {
        return cardNumber.replace(/(\d{4})(?=\d)/g, '$1 ')
    }

    // Example amount to be charged.
    const [amount, setAmount] = useState('')
    const [name, setName] = useState('')

    // Pay with card
    const [isPaymentLinkUsed, setIsPaymentLinkUsed] = useState<boolean>(false)
    const payWithCard = async (event: React.FormEvent) => {
        event.preventDefault()

        await axios
            .post('/check-payment-link', {
                auth: auth,
                amount: amount,
                card_number: cardDetails.card_number,
                card_exp_month: cardDetails.card_exp_month,
                card_exp_year: cardDetails.card_exp_year,
                card_cvn: cardDetails.card_cvn
            })
            .then(response => {
                if (response.data.success === false) {
                    setIsPaymentLinkUsed(true)
                    setErrorMessage(response.data.message)
                    setCardDetails(initCardState)
                    setAmount('')
                    setName('')
                    return
                }

                // Proceed to payment if the payment link is valid.
                // Remove the error banner message.
                setErrorMessage('')

                // Disable the checkout button by setting 'authenticating' to true.
                setAuthenticating(true)

                // Validate the card details.
                const card_number = Xendit.card.validateCardNumber(
                    cardDetails.card_number
                )

                const expiry_date = Xendit.card.validateExpiry(
                    cardDetails.card_exp_month,
                    cardDetails.card_exp_year
                )

                const cvn = Xendit.card.validateCvn(cardDetails.card_cvn)

                if (
                    card_number === false ||
                    expiry_date === false ||
                    cvn === false
                ) {
                    setAuthenticating(false)
                    setCardError(
                        'Invalid card details. Please check your card details and try again.'
                    )
                    return
                }

                setCardError('')

                // Tokenize the card details.
                Xendit.card.createToken(
                    {
                        amount: amount,
                        card_number: cardDetails.card_number,
                        card_exp_month: cardDetails.card_exp_month,
                        card_exp_year: cardDetails.card_exp_year,
                        card_cvn: cardDetails.card_cvn,
                        is_multiple_use: isMultiUse,
                        should_authenticate: true
                    },
                    tokenizationHandler
                )
            })
            .catch(error => {
                setErrorMessage(error.response.data.message)
                setResponseMessage({
                    success: false,
                    message: ''
                })

                // setCardDetails(initCardState)
            })
    }

    // Tokenization callback handler.
    const tokenizationHandler = (
        err: {
            error_code: string
            message: string
            errors: []
        },
        cardToken: {
            id: string
            masked_card_number: string
            authentication_id: string
            status: string
            card_info: {
                bank: string
                country: string
                type: string
                brand: string
            }
            payer_authentication_url: string
        }
    ) => {
        if (err) {
            console.log('Tokenization Error: ', err)
            setAuthenticating(false)
            setErrorMessage(err.message)
            setErrors(err)
            return
        }

        const card_token = cardToken.id

        // Perform authentication of the card token.
        Xendit.card.createAuthentication(
            {
                amount: amount,
                // amount: '10055',
                token_id: card_token
            },
            authenticationHandler
        )
    }

    interface Response {
        success: Boolean
        message: string
    }
    const [responseMessage, setResponseMessage] = useState<Response>({
        success: false,
        message: ''
    })

    // Authentication callback handler.
    const authenticationHandler = (
        err: { error_code: string; message: string },
        response: {
            id: string
            payer_authentication_url: string
            status: string
            credit_card_token_id: string
            masked_card_number: string
            card_info: {
                bank: string
                brand: string
                card_expiration_month: string
                card_expiration_year: string
                country: string
                fingerprint: string
                type: string
            }
            failure_reason: string
        }
    ) => {
        switch (response.status) {
            case 'VERIFIED':
                axios
                    .post('/pay-with-card', {
                        token_id: response.credit_card_token_id,
                        authentication_id: response.id,
                        currency: currency,
                        amount: amount,
                        name: name,
                        auth: auth
                        // amount: '10055',
                    })
                    .then(response => {
                        setAuthenticating(false)

                        setName('')
                        setAmount('')
                        setResponseMessage(response.data)
                        setCardDetails(initCardState)

                        // Close the OTP dialog.
                        setOtpUrl('')
                    })
                    .catch(error => {
                        console.log('Error: ', error)
                        // setErrors(error)
                    })
                break

            case 'IN_REVIEW':
                setOtpUrl(response.payer_authentication_url)
                break

            case 'FAILED':
                setOtpUrl('')
                setAuthenticating(false)

                if (response.failure_reason === 'AUTHENTICATION_FAILED') {
                    setErrorMessage(
                        'Authentication Failed. Please make sure you entered your OTP code correctly and try again.'
                    )
                } else {
                    setErrorMessage(
                        'We encountered an error that prevents the payment to be fulfilled. Please check your card details and make sure you entered the OTP correctly.'
                    )
                }
                break

            default:
                break
        }
    }

    // Load Xendit.js library for credit/debit card tokenization process.
    const loadScript = (src: string, id: string): Promise<void> => {
        return new Promise<void>((resolve, reject) => {
            if (document.getElementById(id)) {
                resolve()
                return
            }
            const script = document.createElement('script')
            script.src = src
            script.id = id
            script.onload = () => resolve()
            script.onerror = () => reject(new Error(`Failed to load ${src}`))
            document.body.appendChild(script)
        })
    }

    useEffect(() => {
        // Load the Xendit.js library.
        loadScript('https://js.xendit.co/v1/xendit.min.js', 'xendit-script')
            .then(() => {
                setXenditLoaded(true)

                // Set your 'public' key here.
                Xendit.setPublishableKey(
                    'xnd_public_development_3uULwlIxkISE6z2vhQrYK5PgbjYBzBdTCKEpig7QXWpx0GZhPnFObLexpXLfcnjC'
                )
            })
            .catch(error =>
                console.error('Failed to load Xendit script: ', error)
            )

        axios
            .get('/fetch-payment-amount/', {
                params: {
                    unique_code: auth
                }
            })
            .then(response => {
                if (response.data.amount) {
                    setAmount(response.data.amount)
                }
            })
            .catch(error => {
                //
            })
    }, [isXenditLoaded])
    return (
        <>
            {/* OTP Dialog */}
            {authenticating ? (
                <div className="fixed left-0 top-0 z-10 flex h-full w-full items-center justify-center bg-black bg-opacity-75 backdrop-blur-md">
                    <div className="flex h-3/4 max-w-2xl flex-col items-center justify-center overflow-hidden rounded-xl bg-white p-8 shadow-2xl">
                        <span className="w-3/4 text-center text-xl font-bold">
                            Please confirm your identity by entering the
                            one-time password (OTP) provided to you.
                        </span>
                        <iframe
                            src={otpUrl}
                            className="h-full w-full"
                        ></iframe>
                    </div>
                </div>
            ) : null}

            <div className="container mx-auto flex flex-col items-center justify-center gap-4">
                {/* Payment form */}
                <div className="flex w-[500px] flex-col rounded-xl border border-gray-300 bg-white shadow-xl">
                    {/* Card payment */}
                    <div className={`flex flex-col p-8 font-medium`}>
                        <input
                            placeholder="Name on card"
                            type="text"
                            className="mb-2 rounded-xl border border-gray-300 bg-gray-100"
                            value={name}
                            name="name"
                            onChange={e => setName(e.target.value)}
                            required
                        />
                        <form
                            onSubmit={payWithCard}
                            className="mb-2 flex flex-col overflow-hidden rounded-xl border border-gray-300 bg-gray-100 shadow-sm"
                        >
                            <div className="flex border-b border-gray-300">
                                <div className="flex w-full flex-col">
                                    <div className="flex flex-col">
                                        <div className="relative flex">
                                            <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                viewBox="0 0 24 24"
                                                fill="currentColor"
                                                data-slot="icon"
                                                className="absolute right-0 top-1/2 h-6 w-6 -translate-x-1/2 -translate-y-1/2 transform text-gray-500"
                                            >
                                                <path d="M4.5 3.75a3 3 0 0 0-3 3v.75h21v-.75a3 3 0 0 0-3-3h-15Z" />
                                                <path
                                                    fillRule="evenodd"
                                                    d="M22.5 9.75h-21v7.5a3 3 0 0 0 3 3h15a3 3 0 0 0 3-3v-7.5Zm-18 3.75a.75.75 0 0 1 .75-.75h6a.75.75 0 0 1 0 1.5h-6a.75.75 0 0 1-.75-.75Zm.75 2.25a.75.75 0 0 0 0 1.5h3a.75.75 0 0 0 0-1.5h-3Z"
                                                    clipRule="evenodd"
                                                />
                                            </svg>
                                            <input
                                                type="text"
                                                id="card_number"
                                                name="card-number"
                                                className="w-full border-none bg-gray-100 p-3 outline-none ring-0 focus:bg-gray-200 focus:ring-0"
                                                placeholder="Card number"
                                                value={formatCardNumber(
                                                    cardDetails.card_number
                                                )}
                                                onChange={e =>
                                                    handleFormChange(
                                                        e,
                                                        'cardDetails'
                                                    )
                                                }
                                            />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div className="flex flex-col">
                                <div className="flex">
                                    <div className="flex w-1/2">
                                        <input
                                            type="text"
                                            id="card_exp_month"
                                            name="card-exp-month"
                                            className="w-14 border-none bg-gray-100 p-3 outline-none ring-0 focus:bg-gray-200 focus:ring-0"
                                            placeholder="MM"
                                            maxLength={2}
                                            value={cardDetails.card_exp_month}
                                            onChange={e =>
                                                handleFormChange(
                                                    e,
                                                    'cardDetails'
                                                )
                                            }
                                        />
                                        <span className="self-center px-3 font-bold text-gray-500">
                                            /
                                        </span>
                                        <input
                                            type="text"
                                            id="card_exp_year"
                                            name="card-exp-year"
                                            className="w-auto border-none bg-gray-100 p-3 outline-none ring-0 focus:bg-gray-200 focus:ring-0"
                                            placeholder="YYYY"
                                            maxLength={4}
                                            value={cardDetails.card_exp_year}
                                            onChange={e =>
                                                handleFormChange(
                                                    e,
                                                    'cardDetails'
                                                )
                                            }
                                        />
                                    </div>
                                    <div className="relative flex w-1/2 border-l border-gray-300">
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            viewBox="0 0 24 24"
                                            fill="currentColor"
                                            data-slot="icon"
                                            className="absolute right-0 top-1/2 h-6 w-6 -translate-x-1/2 -translate-y-1/2 transform text-gray-500"
                                        >
                                            <path
                                                fillRule="evenodd"
                                                d="M12 1.5a5.25 5.25 0 0 0-5.25 5.25v3a3 3 0 0 0-3 3v6.75a3 3 0 0 0 3 3h10.5a3 3 0 0 0 3-3v-6.75a3 3 0 0 0-3-3v-3c0-2.9-2.35-5.25-5.25-5.25Zm3.75 8.25v-3a3.75 3.75 0 1 0-7.5 0v3h7.5Z"
                                                clipRule="evenodd"
                                            />
                                        </svg>
                                        <input
                                            type="text"
                                            id="card_cvn"
                                            name="card-cvn"
                                            className="w-full border-none bg-gray-100 p-3 outline-none ring-0 focus:bg-gray-200 focus:ring-0"
                                            placeholder="CVV"
                                            maxLength={4}
                                            value={cardDetails.card_cvn}
                                            onChange={e =>
                                                handleFormChange(
                                                    e,
                                                    'cardDetails'
                                                )
                                            }
                                        />
                                    </div>
                                </div>
                            </div>
                        </form>
                        <div className="flex flex-col gap-2 rounded-xl border border-gray-300 bg-gray-100 p-4">
                            <span className="font-bold text-gray-400">
                                Amount to pay
                            </span>
                            <span className="text-4xl font-semibold text-gray-600">
                                {new Intl.NumberFormat('en-PH', {
                                    style: 'currency',
                                    currency: 'PHP'
                                }).format(Number(amount))}
                            </span>
                        </div>
                        {/* <input
                            placeholder="Amount to pay (in PHP)"
                            type="number"
                            disabled
                            className="mb-2 rounded-xl border border-gray-300 bg-gray-100 disabled:opacity-70"
                            value={amount}
                            name="amount"
                            onChange={e => setAmount(e.target.value)}
                            required
                            pattern="[0-9]*[.,]?[0-9]*"
                            inputMode="numeric"
                            onKeyDown={e => {
                                // Prevent user from typing '-' or 'e' (scientific notation), etc.
                                if (
                                    e.key === '-' ||
                                    e.key === 'e' ||
                                    e.key === '+'
                                ) {
                                    e.preventDefault()
                                }
                            }}
                        /> */}
                        <div
                            className={`col-span-6 mb-4 justify-center gap-x-4 rounded-xl bg-red-200 p-3 font-medium text-red-800 ${
                                cardError !== '' ? 'flex' : 'hidden'
                            }`}
                        >
                            {cardError}
                        </div>
                        <div className="mt-2 flex flex-col gap-4">
                            <button
                                className={`flex w-full items-center justify-center gap-2 rounded-xl bg-black py-3 text-sm font-bold uppercase text-white hover:bg-gray-800 disabled:cursor-not-allowed disabled:opacity-50 disabled:hover:bg-black`}
                                disabled={authenticating ? true : false}
                                onClick={payWithCard}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    strokeWidth="1.5"
                                    stroke="currentColor"
                                    className="size-5"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        d="M2.25 8.25h19.5M2.25 9h19.5m-16.5 5.25h6m-6 2.25h3m-3.75 3h15a2.25 2.25 0 0 0 2.25-2.25V6.75A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25v10.5A2.25 2.25 0 0 0 4.5 19.5Z"
                                    />
                                </svg>

                                <span>Pay Now</span>
                            </button>
                        </div>
                        {errorMessage !== '' && (
                            <div
                                className={`mt-2 flex flex-col gap-4 rounded-xl bg-red-100 p-3 text-center font-medium text-red-600`}
                            >
                                {errorMessage}
                            </div>
                        )}
                        {responseMessage.message !== '' && (
                            <div
                                className={`mt-2 flex flex-col gap-4 rounded-xl py-3 text-center font-medium ${responseMessage.success ? 'bg-green-200' : 'bg-red-200'}`}
                            >
                                {responseMessage.success
                                    ? responseMessage.message
                                    : 'Transaction failed: ' +
                                      responseMessage.message}
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </>
    )
}

export default Checkout
